import('./utils/build_android')
import('./utils/build_ios')
import('./utils/deploy_firebase')
import('./utils/set_up_env')

desc "--buildType= staging | production"
desc "--platform= ios | android"
desc "--method= adhoc | appstore | development"
desc "--mode= ci | local"
lane :build_proj do |options|	
	buildType = options[:buildType]	
	platform = options[:platform]
	
	UI.success "Type: #{buildType}, Platform: #{platform}"

	
	if platform == "android"
		set_up_env(buildType: buildType, platform: platform)
		build_android(buildType: buildType)
	else 
		method = options[:method]
		mode = options[:mode]
		set_up_env(buildType: buildType, platform: platform, method: method)

		if mode == "ci"
			setup_circle_ci
			create_ci_keychain
		end

		app_store_connect_api
    	generate_new_certificates(buildType: buildType)
		build_ios(buildType: buildType)
	end
end

desc "--buildType=staging | production"
desc "--platform=ios | android"
desc "--method=adhoc | appstore | development"
desc "--mode=ci | local"
desc "--deployType=firebase | testflight | appstore"
lane :deploy do |options|	
	deployType = options[:deployType]
	platform = options[:platform]

	build_proj(options)

	if platform == "ios"
		case deployType
			when "firebase"
				deploy_firebase
			when "testflight"
				upload_to_testflight(
					app_identifier: ENV["APP_IDENTIFIER"],
				)
			when "appstore"
				upload_to_app_store(
					app_identifier: ENV["APP_IDENTIFIER"],
					force: true,
					skip_metadata: true,
					skip_screenshots: true,
					automatic_release: false,
					submit_for_review: false,
					skip_binary_upload: false,
					precheck_include_in_app_purchases: false
				)
			else
				UI.error "Deploy type is not supported"
		end
	else
		case deployType
			when "firebase"
				deploy_firebase
			else
				UI.error "Deploy type is not supported"
		end
	end
end


lane :changelog_notification do |options|	
	update_changelog
	send_slack_notification
end
