desc "Create CI Keychain"
lane :create_ci_keychain do
  create_keychain(
    name: ENV["MATCH_KEYCHAIN_NAME"],
    password: ENV["MATCH_KEYCHAIN_PASSWORD"],
    unlock: true,
    timeout: 3600,
  )
end

lane :app_store_connect_api do
  app_store_connect_api_key(
    key_id: ENV["KEY_ID"],
    issuer_id: ENV["ISSUER_ID"],
    key_content: ENV["KEY_CONTENT"],
    duration: 1200,
    in_house: false
  )
end

desc "Generate new certificates"
desc "--buildType=production | staging"
lane :generate_new_certificates do |options|
  buildType = options[:buildType]

  match(
    type: ENV["METHOD"],
    app_identifier: ENV["APP_IDENTIFIER"],
    force_for_new_devices: true,
    readonly: false,
    generate_apple_certs: false
  )
  update_project_provisioning(
    xcodeproj: './ios/PlaceholderName.xcodeproj',
    target_filter: "PlaceholderName #{buildType}", 
    profile: ENV["sigh_#{ENV['APP_IDENTIFIER']}_#{ENV['METHOD']}"],
    build_configuration: 'Release' 
  )
end

desc "--buildType=staging|production"
lane :build_ios do |options|
  buildType = options[:buildType]
  scheme = "PlaceholderName"
  if buildType === "staging"
    scheme = "PlaceholderName staging"
  end

  build_app( 
    scheme: scheme, 
    xcargs: "-allowProvisioningUpdates",
    workspace: "./ios/PlaceholderName.xcworkspace",
    export_method: "ad-hoc", 
    output_directory: "./ios/"
  )
end
