require 'jira-ruby'

def convert_to_desired_format(input_array)
  result = []

  input_array.each do |item|
    name = item["name"]
	UI.message name
	commit_hash = item["commit"]["sha"]
    tag_parts = name.split('-')
	version_string = tag_parts[0].gsub('v', '')
	version_parts = version_string.split('.')
    version_major = version_parts[0].to_i
    version_minor = version_parts[1].to_i
	version_patch = version_parts[2].to_i
    env = tag_parts[1]

    result << {
        commitHash: commit_hash,
        versionMajor: version_major,
        versionMinor: version_minor,
        versionPatch: version_patch,
        env: env
    }
  end

  result
end

desc "Create changelog from last prod version to current head"
lane :update_changelog do |options|
	result = github_api(
		server_url: "https://api.github.com",
		api_token: ENV["PERSONAL_ACCESS_TOKEN"],
		http_method: "GET",
		path: "#{ENV["GITHUB_API_PATH"]}/tags",
		body: { ref: "dev" }
	)

	if result[:status] != 200
		UI.error "Failed to get tags"
	end

	tags = convert_to_desired_format(JSON.parse(result[:body]))
	
	UI.message tags

	commitHash = ""
	versionMajor = 0
	versionMinor = 0
	versionPatch = 0

	tags.each do |tag|
		currVMajor = tag.fetch(:versionMajor)
		currVMinor = tag.fetch(:versionMinor)
		currVPatch = tag.fetch(:versionPatch)
		currCommit = tag.fetch(:commitHash)

		if currVMajor > versionMajor 
			versionMajor = currVMajor
			versionMinor = currVMinor
			versionPatch = currVPatch
			commitHash = currCommit
		elsif currVMajor == versionMajor && currVMinor > versionMinor
			versionMinor = currVMinor
			commitHash = currCommit
		elsif currVMajor == versionMajor && currVMinor == versionMinor && currVPatch > versionPatch
			versionPatch = currVPatch
			commitHash = currCommit
		end
	end
	
	text1 = "Current commit is: --#{commitHash}--"
	text2 = "Current version is: --#{versionMajor}.#{versionMinor}.#{versionPatch}--"
	
	UI.message text1
	UI.message text2
	
	changelog = changelog_from_git_commits(
		merge_commit_filtering: 'only_include_merges',
		pretty: "%s",
		between: [commitHash, "HEAD"]
	)

	UI.success "CHANGELOG : --#{changelog}--"
	changelogTasks = changelog.scan /EN-\d*/
	uniqueChangelogTasks = changelogTasks.uniq
	UI.success "CHANGELOG TASKS: --#{uniqueChangelogTasks}--"
	
	changelogStringPlain = ''
	changelogStringHtml = ''
	
	uniqueChangelogTasks.each do |task|
		if changelogStringPlain.include? task
		else
			client = JIRA::Client.new({
				username: ENV["JIRA_USERNAME"],
				password:  ENV["JIRA_PASSWORD"],
				context_path: "",
				auth_type: :basic,
				site: "#{ENV["JIRA_URL"]}:443/",
				rest_base_path: "/rest/api/3"
				})
			
			issue = client.Issue.find(task)
			
			issueTitle = issue.fields['summary']
			
			issueURL = "#{ENV["JIRA_URL"]}/browse/#{task}"
			UI.message issueTitle
			UI.message issueURL
			changelogStringPlain = "#{task} - #{issueTitle}\n#{changelogStringPlain}"
			changelogStringHtml = "<a href=\"#{issueURL}\">#{task} - #{issueTitle}</a>\n#{changelogStringHtml}"
		end
	end
	
	pathPlain = './changelog/changelog.txt'
	pathHtml = './changelog/changelog.html'

	f = File.new(pathPlain, 'w')
	f.write(changelogStringPlain)
	f.close

	f = File.new(pathHtml, 'w')
	f.write(changelogStringHtml)
	f.close
end
